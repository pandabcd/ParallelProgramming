CudaMemcpyAsync-----Parallelise first cuda call and something else(e.g approximation algorithm)
Thrust library as stl


ToRead-
Pinned Memory

Report-
We have to take vertex disjoint stuff and not edge disjoint because edge disjoint way cannot have atomic algos...
We cannot use pure adjacency list form as in normal graphs due to the limitation of CUDA(including thrust library) not supporting vectors(or array) or vectors in its pure form without being very inefficient.
Using 1-d vector instead of 2-d vectors since it is more efficient
Theoretical v/s effective bandwidth
Write about Amdahl's law in report
Optimization not done(See section 9.1)- 
Overlapping computation(GPU and CPU) and data transfers--- Hard in our case
Staged concurrent copy and execute --- COuld be done
Zero Copy for integrated GPU and CPU

9.2.1.3. Effects of Misaligned Accesses